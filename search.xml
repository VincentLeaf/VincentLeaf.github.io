<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[使用itchat库搭建一个微信聊天机器人]]></title>
      <url>/2017/06/06/wechatbot01/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>制作这个机器人的灵感实际上是因为我实在是懒得去一条条的回一些很简单没有意义的微信…(逃，在以下的介绍中我将概述如何使用itchat在python中接收并发送信息，并使用图灵机器人接口完成一个能自动聊天的机器人。</p>
<p>##插件安装</p>
<ul>
<li>itchat是一个python的库，我们使用这个库来获得微信中所收到的消息和发送自定义消息。更多有关这个库的信息可以访问它的<a href="https://github.com/littlecodersh/ItChat" target="_blank" rel="external">GitHub主页</a></li>
<li>首先我们在电脑中安装此库所需的环境，直接在终端中运行<code>pip install</code>即可。</li>
</ul>
<figure class="highlight plain"><figcaption><span>install itchat```</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">* 如果你没有安装python，请自行搜索有关python的安装方法</div><div class="line"></div><div class="line">## itchat接口介绍</div><div class="line">### **登陆方法**`itchat.login()`</div><div class="line">* 	直接调用方法itchat.login()后会自动下载登录所用的二维码，二维码为jpg格式。</div><div class="line">*  第二种方法是调用方法```itchat.login(enableCmdQR = 1)```使用这个方法后登陆用的二维码将直接在终端（CMD）中打印出来，如果你打印出来的二维码没有对齐，可以尝试将参数修改成```itchat.login(enableCmdQr = 2)```,这样二维码间的间隙就会变大一些。</div><div class="line">*  其实itchat有保存登录信息的功能，可以让你退出程序后短暂保存登录信息，下次重新启动程序时就不需要再扫码。但我实际开发时总是遇到一些奇怪的Bug，比如说自动回复有时会一次发送两条，这应该是保存登录信息的时候同时也保存了一些消息记录，导致注册消息时出现了一些bug, 有兴趣的话可以使用如下代码：```itchat.auto_login(hotReload=True)</div></pre></td></tr></table></figure>
<h3 id="获取消息"><a href="#获取消息" class="headerlink" title="获取消息"></a><strong>获取消息</strong><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">* 简单来讲，获得消息有两种方法：</div></pre></td></tr></table></figure></h3><p>import itchat<br>from itchat.content import *</p>
<p>‘’’第一种方法是获取所有类型为“文字”的消息’’’<br>@itchat.msg_register(TEXT)<br>def simpleRegister(msg):<br>    return msg</p>
<p>‘’’第二种方法是带参数的注册方法，如识别是否为群聊消息，是否为好友消息等。’’’<br>‘’’如果满足参数，就会优先调用此方法。’’’<br>@itchat.msg_register(TEXT, isFriendChat=True, isGroupChat=True, isMpChat=True)<br>def parameterRegister(msg):<br>    return msg<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">* 除了‘TEXT’文本消息，还有以下几种消息类型：</div><div class="line"> ![](http:<span class="comment">//oqi5hmt36.bkt.clouddn.com/17-6-13/48725876.jpg) </span></div><div class="line"> </div><div class="line">### 消息内容```msg[<span class="string">'Content'</span>]</div></pre></td></tr></table></figure></p>
<ul>
<li>如果你已经尝试了上述的消息注册方法，你会发现直接打印变量msg是不能成功打印出回复的内容的。因为msg实际上是一个数组，它里头包含了许多有趣的内容。</li>
<li><p><strong>常用内容介绍</strong></p>
<ul>
<li><figure class="highlight plain"><figcaption><span>顾名思义，它就是消息中的文字信息，直接打印此内容可以打印出收到的文字信息。</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">	* ```msg[&apos;FromUserName&apos;]```,消息发出者</div><div class="line">	* ```msg[&apos;ToUserName&apos;]```,消息接受者</div><div class="line"></div><div class="line">### 发送方法```itchat.send(msg, ToUserName)</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>itchat中的发送方法不仅仅可以发送文字，还可以发送图片，定位的信息，在此，我将先介绍发送文字的方法。</p>
</li>
<li>send方法有两个参数：<ul>
<li>msg: 要发送的文字内容，字符串。</li>
<li>ToUserName: 消息接收者，字符串。</li>
</ul>
</li>
</ul>
<h2 id="自动回复机器人"><a href="#自动回复机器人" class="headerlink" title="自动回复机器人"></a>自动回复机器人</h2><p>在了解以上信息后，我们便可以制作一个简单的微信自动回复机器人。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"><span class="keyword">import</span> itchat</div><div class="line"><span class="keyword">from</span> itchat.content <span class="keyword">import</span> *</div><div class="line"><span class="string">'''导入itchat库'''</span></div><div class="line"></div><div class="line"><span class="string">'''注册来自好友的文字信息‘’‘</span></div><div class="line">@itchat.msg_register(TEXT, isFriendChat = True)</div><div class="line">def autoReply(msg):</div><div class="line">	itchat.reply(u'收到消息: %s' %msg['Content'], msg['FromUserName'])</div><div class="line">'''回复消息发出者收到xxx<span class="string">'''</span></div><div class="line"></div><div class="line">itchat.login()</div><div class="line">itchat.run()</div></pre></td></tr></table></figure>
<p>下次我将介绍如何接入图灵机器人的接口，制作一个微信聊天机器人。</p>
<blockquote>
<p>作者：Vincent Li</p>
<p>更多内容请访问<a href="http://www.zhuile.me/" target="_blank" rel="external">追了么</a></p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 聊天机器人 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> wechat </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[在workflow中速查练习答案]]></title>
      <url>/2017/05/24/anscheck/</url>
      <content type="html"><![CDATA[<blockquote>
<p>这几天在刷SAT练习题时发现在查答案的时候总是要把书翻来翻去，看半天还没找到自己所需要的答案，于是便脑洞一开，设计了这个workflow流程。</p>
</blockquote>
<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>这个程序的思路是十分简单的，创建一个数组，把答案（ABCDE）全部都丢到数组里，用户输入index，返回index所在的值。</p>
<h1 id="开始制作"><a href="#开始制作" class="headerlink" title="开始制作"></a>开始制作</h1><ul>
<li>首先先花了五分钟把550个答案手动打到了电脑里…（手酸）其实可以直接跟老师要答案的电子版会更快。</li>
</ul>
<p><img src="http://i1.piimg.com/588926/cb025bb2d863d2cb.png" alt="answers"></p>
<ul>
<li>在workflow里选择流程时我实际上遇到了一下小困难，dictionary或者list的格式都是需要一个一个添加值的，这样的话手都会按抽筋吧，而且效率低下。翻了一遍之后发现了一个满足我需求的流程：split text.</li>
</ul>
<p><img src="http://i1.piimg.com/588926/c683a8e8fc6ee3c9.png" alt="spilit"></p>
<ul>
<li>split text有几种模式可以选择，最让我开心的是可以每个字母都分割成list中的一个值，果断选择这个。</li>
<li>然后就加入用户录入的部分了，没什么复杂的东西，按常规来就好了。唯一需要注意的就是加入一些逻辑判断（判断用户输入的值是否在答案中），防止出现index out of range的情况。</li>
</ul>
<blockquote>
<p><img src="http://i1.piimg.com/588926/f42d3d2edc3d0d21.png" alt="in"><br>注意顶端的repeat, 在我实际使用的时候发现每次查的时候都要点一下workflow，这样的操作就过于繁琐，于是我便加入了这个repeat这样我在不需要退出workflow的情况下就可以继续查下一个题了。</p>
</blockquote>
<p><img src="http://i4.buimg.com/588926/0241d284ac7ef852.png" alt="if"></p>
<ul>
<li>将用户输入的值传给list, 查找所处index的值。最后再将查询到的值（答案）以alert的形式显示在用户的屏幕上。</li>
</ul>
<p><img src="http://i1.piimg.com/588926/3ab0aab1db97273f.png" alt=""></p>
<ul>
<li>记得要设置几个变量，以便在alert中使用。</li>
</ul>
<h1 id="实际运行"><a href="#实际运行" class="headerlink" title="实际运行"></a>实际运行</h1><p><img src="http://i4.buimg.com/588926/275d2412f1bbcc25.jpg" alt=""><br><img src="http://i1.piimg.com/588926/04c2ad139d9b5891.jpg" alt=""><br><img src="http://i1.piimg.com/588926/ced8a1a9ebbf760d.jpg" alt=""><br><img src="http://i4.buimg.com/588926/2be5da217298178d.jpg" alt=""></p>
<h1 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h1><p>需要先安装iOS Workflow软件<br><a href="https://workflow.is/workflows/960b21ee81104e519e3296012374de18" target="_blank" rel="external">workflow练习答案速查</a></p>
]]></content>
      
        <categories>
            
            <category> 工具 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> workflow </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[追了么]]></title>
      <url>/2017/05/23/%E8%BF%BD%E4%BA%86%E4%B9%88/</url>
      <content type="html"></content>
      
        
    </entry>
    
  
  
    
    <entry>
      <title><![CDATA[About]]></title>
      <url>/about/index.html</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[图库]]></title>
      <url>/gallery/index.html</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[links]]></title>
      <url>/links/index.html</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[标签云]]></title>
      <url>/tags/index.html</url>
      <content type="html"></content>
    </entry>
    
  
</search>
